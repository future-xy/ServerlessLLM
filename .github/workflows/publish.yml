name: Create Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

# Needed to create release and upload assets
permissions:
  contents: write

jobs:
  release:
    # Retrieve tag and create release
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract branch info
        shell: bash
        run: |
          echo "release_tag=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: "actions/github-script@v6"
        env:
          RELEASE_TAG: ${{ env.release_tag }}
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const script = require('.github/workflows/scripts/create_release.js')
            await script(github, context, core)
  sllm:
    name: Build Wheel For ServerlessLLM
    runs-on: ${{ matrix.os }}
    needs: release

    strategy:
      fail-fast: false
      matrix:
          os: ['ubuntu-latest']
          python-version: ['3.10']

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Free Up GitHub Actions Ubuntu Runner Disk Space
        shell: bash
        run: |
          bash -x .github/workflows/scripts/free-disk-space.sh

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true
          key: ${{ github.job }}-${{ matrix.python-version }}-${{ matrix.cuda-version }}

      - name: Set up Linux Env
        if: ${{ runner.os == 'Linux' }}
        run: |
          bash -x .github/workflows/scripts/env.sh

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
            python-version: ${{ matrix.python-version }}

      - name: Build wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          python setup.py sdist bdist_wheel
          wheel_name=$(ls dist/*whl | xargs -n 1 basename)
          asset_name=${wheel_name//"linux"/"manylinux1"}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/${{ env.wheel_name }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/*

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sllm-wheel
          path: ./dist/${{ env.wheel_name }}

      # - name: Publish package
      #   # Only publish to PyPI if we have the secret (i.e., not on forks)
      #   if: ${{ env.SLLM_PYPI != '' }}
      #   uses: pypa/gh-action-pypi-publish@release/v1.8
      #   env:
      #     SLLM_PYPI: ${{ secrets.SLLM_PYPI }}
      #   with:
      #     password: ${{ secrets.SLLM_PYPI }}
      #     skip-existing: true

  sllm-store:
    name: Build Wheel For ServerlessLLM Store
    runs-on: [self-hosted, linux, gpu]  # Use self-hosted runner with GPU
    needs: release
    container:
      image: nvidia/cuda:12.3.0-devel-ubuntu20.04
      options: --gpus all

    strategy:
      fail-fast: false
      matrix:
          python-version: ['3.10']
          pytorch-version: ['2.3.0']  # Must be the most recent version that meets requirements-cuda.txt.
          cuda-version: ['12.3.0']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build sllm-store wheel
        working-directory: sllm_store
        env:
          CMAKE_BUILD_TYPE: Release
          TORCH_CUDA_ARCH_LIST: "8.0 8.6 8.9 9.0"
        run: |
          # Install build dependencies
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements-build.txt
          python3 -m pip install setuptools wheel twine
          
          # Build the wheel
          python3 setup.py sdist bdist_wheel
          
          # Set wheel name environment variables
          wheel_name=$(ls dist/*.whl | xargs -n 1 basename)
          asset_name=${wheel_name//"linux"/"manylinux1"}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./sllm_store/dist/${{ env.wheel_name }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/*

      - name: Rename wheel
        working-directory: sllm_store
        run: |
          mv dist/${{ env.wheel_name }} dist/${{ env.asset_name }}

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sllm-store-wheel
          path: ./sllm_store/dist/${{ env.asset_name }}

      # - name: Publish package
      #   # Only publish to PyPI if we have the secret (i.e., not on forks)
      #   if: ${{ env.SLLM_STORE_PYPI != '' }}
      #   uses: pypa/gh-action-pypi-publish@release/v1.8
      #   env:
      #     SLLM_STORE_PYPI: ${{ secrets.SLLM_STORE_PYPI }}
      #   with:
      #     packages-dir: ./sllm_store/dist/
      #     password: ${{ secrets.SLLM_STORE_PYPI }}
      #     skip-existing: true